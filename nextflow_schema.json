{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/./master/nextflow_schema.json",
    "title": "epi2me-labs/wf-pore-c",
    "description": "Workflow for analysing Pore-c data.",
    "demo_url": "https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-pore-c/wf-pore-c-demo.tar.gz",
    "url": "https://github.com/epi2me-labs/wf-porec",
    "type": "object",
    "definitions": {
        "input_options": {
            "title": "Input Options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Parameters for finding and handling input data for analysis.",
            "properties": {
                "ubam": {
                    "type": "string",
                    "format": "file-path",
                    "description": "An unaligned bam file containing Pore-C concatemer sequences",
                    "help_text": "This accepts one of three cases: (i) the path to a single BAM file; (ii) the path to a top-level directory containing BAM files; (iii) the path to a directory containing one level of sub-directories which in turn contain BAM files. In the first and second case, a sample name can be supplied with `--sample`. In the last case, the data is assumed to be multiplexed with the names of the sub-directories as barcodes. In this case, a sample sheet can be provided with `--sample_sheet`."
                },
                "fastq": {
                    "type": "string",
                    "format": "path",
                    "description": "FASTQ files to use in the analysis.",
                    "help_text": "This accepts one of three cases: (i) the path to a single FASTQ file; (ii) the path to a top-level directory containing FASTQ files; (iii) the path to a directory containing one level of sub-directories which in turn contain FASTQ files. In the first and second case, a sample name can be supplied with `--sample`. In the last case, the data is assumed to be multiplexed with the names of the sub-directories as barcodes. In this case, a sample sheet can be provided with `--sample_sheet`."
                },
                "sample_sheet": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A CSV file used to map barcodes to sample aliases. The sample sheet can be provided when the input data is a directory containing sub-directories with FASTQ files.",
                    "help_text": "The sample sheet is a CSV file with, minimally, columns named `barcode` and `alias`. Extra columns are allowed. A `type` column is required for certain workflows and should have the following values; `test_sample`, `positive_control`, `negative_control`, `no_template_control`."
                },
                "params_sheet": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A CSV file to provide per sample cutter and VCF parameters in the format [alias, cutter, vcf]. The aliases will need to match those on the sample sheet.",
                    "help_text": "VCF may be null if no phased vcf available for that sample."
                },
                "analyse_unclassified": {
                    "type": "boolean",
                    "default": false,
                    "description": "Analyse unclassified reads from input directory. By default the workflow will not process reads in the unclassified directory.",
                    "help_text": "If selected and if the input is a multiplex directory the workflow will also process the unclassified directory."
                },
                "ref": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A fasta file containing the reference genome to map against"
                },
                "vcf": {
                    "type": "string",
                    "format": "file-path",
                    "description": "An optional phased VCF file that will be used to haplotag alignments"
                },
                "cutter": {
                    "type": "string",
                    "default": "NlaIII",
                    "description": "The enzyme used in the restriction digest"
                }
            },
            "required": [
                "ref",
                "cutter"
            ]
        },
        "output_options": {
            "title": "Output Options",
            "type": "object",
            "description": "Parameters for saving and naming workflow outputs.",
            "default": "",
            "properties": {
                "out_dir": {
                    "type": "string",
                    "default": "output",
                    "format": "directory-path",
                    "description": "Directory for output of all user-facing files."
                }
            }
        },
        "advanced_options": {
            "title": "Advanced Options",
            "type": "object",
            "description": "Avanced options for configuring processes inside the workflow.",
            "default": "",
            "properties": {
                "chunk_size": {
                    "type": "integer",
                    "default": -1,
                    "description": "Split input bam into reads of this size"
                },
                "threads": {
                    "type": "integer",
                    "default": 4,
                    "description": "Set max number of threads to use for more intense processes (limited by config executor cpus)"
                },
                "ubam_map_threads": {
                    "type": "integer",
                    "default": 4,
                    "description": "Set max number of threads to use for aligning reads from uBAM (limited by config executor cpus)"
                },
                "digest_annotate_threads": {
                    "type": "integer",
                    "default": 2,
                    "description": "Set max number of threads to use for sorting and indexing aligned reads from uBAM, digesting and annotation (limited by config executor cpus)"
                },
                "ubam_bam2fq_threads": {
                    "type": "integer",
                    "default": 2,
                    "description": "Set max number of threads to use for uncompressing uBAM and generating FASTQ for alignment (limited by config executor cpus)"
                }
            },
            "help_text": "These advanced options do not need to be changed for typical use, but allow fine tuning of workflows for users who want more control over the workflow."
        },
        "pore_c_tools_options": {
            "title": "Pore-C Tools Options",
            "type": "object",
            "description": "Parameters to control the pore-c tools",
            "properties": {
                "minimap2_settings": {
                    "type": "string",
                    "default": "-x map-ont",
                    "description": "The minimap2 settings for mapping monomers"
                },
                "coverage": {
                    "type": "boolean",
                    "description": "Calculate restriction-fragment coverage using mosdepth"
                }
            }
        },
        "chromunity_options": {
            "title": "Chromunity Options",
            "type": "object",
            "description": "Create files for Chromunity analyses",
            "properties": {
                "chromunity": {
                    "type": "boolean",
                    "default": false,
                    "description": "Create parquet files for Chromunity"
                },
                "chromunity_merge_distance": {
                    "type": "integer",
                    "default": -1,
                    "description": "Merge colinear alignments separated by less than this distance into a single monomer"
                }
            }
        },
        "4dn_files_options": {
            "title": "4DN files Options",
            "type": "object",
            "description": "Create files for the 4D nucleome toolset",
            "properties": {
                "pairs": {
                    "type": "boolean",
                    "description": "Create a 4DN-format pairs file (also calculate stats)."
                },
                "mcool": {
                    "type": "boolean",
                    "description": "Create a multi-resolution cooler file"
                },
                "cool_bin_size": {
                    "type": "integer",
                    "default": 1000,
                    "description": "The resolution of the base cooler file"
                },
                "mcool_resolutions": {
                    "type": "string",
                    "default": "4DN",
                    "description": "The resolutions of the mcool file (see cooler documentation for details)."
                }
            }
        },
        "paired_end_bam_options": {
            "title": "Paired-end BAM Options",
            "type": "object",
            "description": "Create mock paired-end BAM files for legacy tools",
            "properties": {
                "paired_end": {
                    "type": "boolean",
                    "description": "Create mock paired-end BAM files."
                },
                "filter_pairs": {
                    "type": "boolean",
                    "description": "Filter paired end reads using minimum and maximum distance parameters."
                },
                "paired_end_minimum_distance": {
                    "type": "integer",
                    "default": -1,
                    "description": "Remove trans pairs and cis- pairs separated by a distance shorter than this"
                },
                "paired_end_maximum_distance": {
                    "type": "integer",
                    "default": -1,
                    "description": "Remove trans pairs and cis- pairs separated by a distance greater than this"
                }
            }
        },
        "misc": {
            "title": "Misc",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "disable_ping": {
                    "type": "boolean",
                    "description": "Enable to prevent sending a workflow ping."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_options"
        },
        {
            "$ref": "#/definitions/output_options"
        },
        {
            "$ref": "#/definitions/advanced_options"
        },
        {
            "$ref": "#/definitions/pore_c_tools_options"
        },
        {
            "$ref": "#/definitions/chromunity_options"
        },
        {
            "$ref": "#/definitions/4dn_files_options"
        },
        {
            "$ref": "#/definitions/paired_end_bam_options"
        },
        {
            "$ref": "#/definitions/misc"
        }
    ],
    "properties": {
        "process_label": {
            "type": "string",
            "description": "The main process label for template processes to use by default",
            "hidden": true,
            "default": "wf-porec"
        },
        "aws_image_prefix": {
            "type": "string",
            "hidden": true
        },
        "aws_queue": {
            "type": "string",
            "hidden": true
        },
        "monochrome_logs": {
            "type": "boolean"
        },
        "validate_params": {
            "type": "boolean",
            "default": true
        },
        "show_hidden_params": {
            "type": "boolean"
        },
        "version": {
            "type": "boolean"
        },
        "sample_id": {
            "type": "string",
            "default": "None"
        }
    },
    "docs": {
        "intro": "## Introduction\n\nPore-C is an end-to-end workflow unique to Oxford Nanopore which combines chromatin conformation capture (3C) with direct, long nanopore sequencing reads. With nanopore reads, long-range, multi-way contact information can be obtained.  Pore-C can be used to scaffold and improve the quality of existing genome assemblies to generate chromosome-scale assemblies, discover unique insights into the higher-order genome organisation of a species of interest, and reveal epigenetic information for a more comprehensive understanding of gene regulation. Find out more about the workflow [here](https://nanoporetech.com/about-us/news/pore-c-complete-end-end-workflow-chromatin-conformation-capture-published-nature)\n\nThis nextflow workflow will create virtual digests of the genome using the [pore-c-py package](https://github.com/epi2me-labs/pore-c-py), align the resulting monomers against a reference genome with [minimap2](https://github.com/lh3/minimap2) and then filter spurious alignments, detect ligation junctions and assign fragments. The resulting BAM alignment file can be used with downstream tools. \n\nOptionally the workflow can output a [pairs format](https://github.com/4dn-dcic/pairix/blob/master/pairs_format_specification.md) report which uses [pairtools](https://github.com/open2c/pairtools).\n",
        "links": "## Useful links\n\n* [nextflow](https://www.nextflow.io/)\n* [docker](https://www.docker.com/products/docker-desktop)\n* [pore-c-py](https://github.com/epi2me-labs/pore-c-py)\n* [minimap2](https://github.com/lh3/minimap2)\n* [pairtools](https://github.com/open2c/pairtools)\n* [Pore-C](https://nanoporetech.com/resource-centre/porec): multi-contact, chromosome conformation capture for both genome-wide and targeted analyses.\n* Visit the [Nanopore Community](https://community.nanoporetech.com/info_sheets/restriction-enzyme-pore-c/v/rpc_s1015_v1_revf_12nov2019) for guidance through every step of the Pore-C workflow. Optimised Nanopore workflows have been developed: blood samples, [plants](https://nanoporetech.com/sites/default/files/s3/literature/plant-pore-c-workflow.pdf), and cell culture, animal, or insect tissues \u2013 the method is simple and scalable.\n\n\n### References\n\nDeshpande, A.S., Ulahannan, N., Pendleton, M. et al. Identifying synergistic high-order 3D chromatin conformations from genome-scale nanopore concatemer sequencing. Nat Biotechnol (2022). https://doi.org/10.1038/s41587-022-01289-z: https://www.nature.com/articles/s41587-022-01289-z  "
    }
}