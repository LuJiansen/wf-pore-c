{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/./master/nextflow_schema.json",
    "title": "epi2me-labs/wf-pore-c",
    "description": "Workflow for analysing Pore-c data.",
    "demo_url": "https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-pore-c/wf-pore-c-demo.tar.gz",
    "aws_demo_url": "https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-pore-c/wf-pore-c-demo/aws.nextflow.config",
    "url": "https://github.com/epi2me-labs/wf-pore-c",
    "type": "object",
    "definitions": {
        "input_options": {
            "title": "Input Options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Parameters for finding and handling input data for analysis.",
            "properties": {
                "bam": {
                    "type": "string",
                    "format": "file-path",
                    "title": "Unaligned BAM",
                    "description": "An unaligned BAM file containing Pore-C concatemer sequences",
                    "help_text": "This accepts one of three cases: (i) the path to a single BAM file; (ii) the path to a top-level directory containing BAM files; (iii) the path to a directory containing one level of sub-directories which in turn contain BAM files. In the first and second case, a sample name can be supplied with `--sample`. In the last case, the data is assumed to be multiplexed with the names of the sub-directories as barcodes. In this case, a sample sheet can be provided with `--sample_sheet`."
                },
                "fastq": {
                    "type": "string",
                    "format": "path",
                    "title": "FASTQ",
                    "description": "FASTQ files to use in the analysis.",
                    "help_text": "This accepts one of three cases: (i) the path to a single FASTQ file; (ii) the path to a top-level directory containing FASTQ files; (iii) the path to a directory containing one level of sub-directories which in turn contain FASTQ files. In the first and second case, a sample name can be supplied with `--sample`. In the last case, the data is assumed to be multiplexed with the names of the sub-directories as barcodes. In this case, a sample sheet can be provided with `--sample_sheet`."
                },
                "sample_sheet": {
                    "type": "string",
                    "format": "file-path",
                    "title": "Sample sheet",
                    "description": "A CSV file used to map barcodes to sample aliases and optionally provide per-sample parameters. The sample sheet can be provided when the input data is a directory containing sub-directories with FASTQ files.",
                    "help_text": "The sample sheet is a CSV file with, minimally, columns named `barcode` and `alias`. Optionally, a `cutter` column can contain the name of the enzyme used per sample (see the `--cutter` parameter for more details) and a `vcf` column can be used to provide a phased VCF file per sample if you require haplotagged alignments."
                },
                "sample": {
                    "type": "string",
                    "description": "A single sample name for non-multiplexed data. Permissible if passing a single .fastq(.gz) file or directory of .fastq(.gz) files."
                },
                "analyse_unclassified": {
                    "type": "boolean",
                    "default": false,
                    "description": "Analyse unclassified reads from input directory. By default the workflow will not process reads in the unclassified directory.",
                    "help_text": "If selected and if the input is a multiplex directory the workflow will also process the unclassified directory."
                },
                "ref": {
                    "type": "string",
                    "title": "Reference FASTA",
                    "format": "file-path",
                    "description": "A fasta file containing the reference genome to map against"
                },
                "vcf": {
                    "type": "string",
                    "title": "VCF",
                    "format": "file-path",
                    "description": "An optional phased VCF file that will be used to haplotag alignments"
                },
                "cutter": {
                    "type": "string",
                    "default": "NlaIII",
                    "description": "The enzyme used in the restriction digest.",
                    "help_text": "Any enzyme from the Biopython restriction dictionary can be used. See `https://github.com/biopython/biopython/blob/master/Bio/Restriction/Restriction_Dictionary.py`"
                }
            },
            "allOf": [
                {
                    "required": [
                        "ref"
                    ]
                },
                {
                    "oneOf": [
                        {
                            "required": [
                                "fastq"
                            ]
                        },
                        {
                            "required": [
                                "bam"
                            ]
                        }
                    ]
                }
            ]
        },
        "output_options": {
            "title": "Output Options",
            "type": "object",
            "description": "Parameters for saving and naming workflow outputs.",
            "default": "",
            "properties": {
                "out_dir": {
                    "type": "string",
                    "default": "output",
                    "format": "directory-path",
                    "description": "Directory for output of all user-facing files."
                },
                "hi_c": {
                    "type": "boolean",
                    "default": false,
                    "description": "Output a Hi-C formatted file; will convert pairs format to a Hi-C (`.hic`) file which will be compatible with [juicer](https://github.com/aidenlab/juicer)",
                    "help_text": "Load this file with [Juice box](https://www.aidenlab.org/juicebox/) for an alternative contact map visualisation."
                }
            }
        },
        "advanced_options": {
            "title": "Advanced Options",
            "type": "object",
            "description": "Avanced options for configuring processes inside the workflow.",
            "default": "",
            "properties": {
                "chunk_size": {
                    "type": "integer",
                    "default": 25000,
                    "description": "Process input in chunks of this number of reads.",
                    "help_text": "To reduce per-process memory requirements for large datasets, process the inputs in chunks of reads. Set to 0 to process entire dataset in one go."
                },
                "threads": {
                    "type": "integer",
                    "default": 4,
                    "description": "Set maximum number of threads to use for more intense processes (limited by config executor cpus). We recommend a minimum of 4, but if available 19.",
                    "help": "Increasing this will speed up some individual processes, but reduce the number of processes that can run in parallel, potentially increasing the time for the workflow to run overall."
                }
            },
            "help_text": "These advanced options do not need to be changed for typical use, but allow fine tuning of workflows for users who want more control over the workflow."
        },
        "pore_c_tools_options": {
            "title": "Pore-C Tools Options",
            "type": "object",
            "description": "Parameters to control the pore-c tools",
            "properties": {
                "minimap2_settings": {
                    "type": "string",
                    "default": "-x map-ont",
                    "description": "The minimap2 settings for mapping monomers"
                },
                "coverage": {
                    "type": "boolean",
                    "default": false,
                    "description": "Calculate restriction-fragment coverage using mosdepth"
                },
                "summary_json": {
                    "type": "boolean",
                    "default": true,
                    "description": "Output pore-c-py annotation summary in json format."
                }
            }
        },
        "chromunity_options": {
            "title": "Chromunity Options",
            "type": "object",
            "description": "Create files for Chromunity analyses",
            "properties": {
                "chromunity": {
                    "type": "boolean",
                    "default": false,
                    "description": "Create parquet files for Chromunity.",
                    "help_text": "See the chromunity documentation for further details 'https://github.com/mskilab/chromunity'."
                },
                "chromunity_merge_distance": {
                    "type": "integer",
                    "default": -1,
                    "description": "Merge colinear alignments separated by less than this base pair distance into a single monomer."
                }
            }
        },
        "4dn_files_options": {
            "title": "4DN files Options",
            "type": "object",
            "description": "Create files for the 4D nucleome toolset",
            "properties": {
                "pairs": {
                    "type": "boolean",
                    "default": false,
                    "description": "Create a 4DN-format pairs file (also calculate stats).",
                    "help_text": "Outputs a directory with a pairs stats report and a pairs file which can be used for downstream anaylsis."
                },
                "mcool": {
                    "type": "boolean",
                    "default": false,
                    "title": "Multi-resolution cooler file (mcool)",
                    "description": "Create a multi-resolution cooler file. Will output the cooler formatted file which you can load with cooler.",
                    "help_text": "see 'https://open2c.github.io/cooler' for more details."
                },
                "cool_bin_size": {
                    "type": "integer",
                    "title": "Cooler file bin size",
                    "default": 1000,
                    "description": "The bin size of the cooler output file in base pairs.",
                    "help_text": "see 'https://open2c.github.io/cooler' for more details."
                },
                "mcool_resolutions": {
                    "type": "string",
                    "default": "1000,2000,5000N",
                    "description": "The resolutions of the mcool file in pixels (see cooler documentation for details).",
                    "help_text": "Comma-separated list of target resolutions. Use suffixes B or N to specify a progression: B for binary (geometric steps of factor 2), N for nice (geometric steps of factor 10 interleaved with steps of 2 and 5). This is the equivalent of the `--resolutions` flag in cooler; see an example here 'https://cooler.readthedocs.io/en/latest/cli.html'."
                }
            }
        },
        "paired_end_bam_options": {
            "title": "Paired-end BAM Options",
            "type": "object",
            "description": "Create mock paired-end BAM files for legacy tools",
            "properties": {
                "paired_end": {
                    "type": "boolean",
                    "title": "Paired end BAM",
                    "description": "Create mock paired-end BAM files.",
                    "default": false
                },
                "filter_pairs": {
                    "type": "boolean",
                    "default": false,
                    "description": "Filter paired end reads using minimum and maximum distance parameters."
                },
                "paired_end_minimum_distance": {
                    "type": "integer",
                    "default": -1,
                    "description": "Remove trans pairs and cis- pairs separated by a distance shorter than this"
                },
                "paired_end_maximum_distance": {
                    "type": "integer",
                    "default": -1,
                    "description": "Remove trans pairs and cis- pairs separated by a distance greater than this"
                }
            }
        },
        "misc": {
            "title": "Misc",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true,
                    "default": false
                },
                "disable_ping": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable to prevent sending a workflow ping."
                },
                "version": {
                    "type": "boolean",
                    "default": false
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_options"
        },
        {
            "$ref": "#/definitions/output_options"
        },
        {
            "$ref": "#/definitions/advanced_options"
        },
        {
            "$ref": "#/definitions/pore_c_tools_options"
        },
        {
            "$ref": "#/definitions/chromunity_options"
        },
        {
            "$ref": "#/definitions/4dn_files_options"
        },
        {
            "$ref": "#/definitions/paired_end_bam_options"
        },
        {
            "$ref": "#/definitions/misc"
        }
    ],
    "properties": {
        "aws_image_prefix": {
            "type": "string",
            "hidden": true
        },
        "aws_queue": {
            "type": "string",
            "hidden": true
        },
        "monochrome_logs": {
            "type": "boolean"
        },
        "validate_params": {
            "type": "boolean",
            "default": true
        },
        "show_hidden_params": {
            "type": "boolean"
        }
    },
    "docs": {
        "intro": "## Introduction\n\nPore-C is an end-to-end workflow unique to Oxford Nanopore which combines chromatin conformation capture (3C) with direct, long nanopore sequencing reads. With nanopore reads, long-range, multi-way contact information can be obtained.  Pore-C can be used to scaffold and improve the quality of existing genome assemblies to generate chromosome-scale assemblies, discover unique insights into the higher-order genome organisation of a species of interest, and reveal epigenetic information for a more comprehensive understanding of gene regulation. Find out more about the workflow [here](https://nanoporetech.com/about-us/news/pore-c-complete-end-end-workflow-chromatin-conformation-capture-published-nature)\n\nThis nextflow workflow will create virtual digests of the genome using the [pore-c-py package](https://github.com/epi2me-labs/pore-c-py), align the resulting monomers against a reference genome with [minimap2](https://github.com/lh3/minimap2) and then filter spurious alignments, detect ligation junctions and assign fragments. The resulting BAM alignment file can be used with downstream tools. \n\nOptionally the workflow can output a [pairs format](https://github.com/4dn-dcic/pairix/blob/master/pairs_format_specification.md) report which uses [pairtools](https://github.com/open2c/pairtools).\n",
        "links": "## Useful links\n\n* [nextflow](https://www.nextflow.io/)\n* [docker](https://www.docker.com/products/docker-desktop)\n* [pore-c-py](https://github.com/epi2me-labs/pore-c-py)\n* [minimap2](https://github.com/lh3/minimap2)\n* [pairtools](https://github.com/open2c/pairtools)\n* [Pore-C](https://nanoporetech.com/resource-centre/porec): multi-contact, chromosome conformation capture for both genome-wide and targeted analyses.\n* Visit the [Nanopore Community](https://community.nanoporetech.com/info_sheets/restriction-enzyme-pore-c/v/rpc_s1015_v1_revf_12nov2019) for guidance through every step of the Pore-C workflow. Optimised Nanopore workflows have been developed: blood samples, [plants](https://nanoporetech.com/sites/default/files/s3/literature/plant-pore-c-workflow.pdf), and cell culture, animal, or insect tissues \u2013 the method is simple and scalable.\n\n\n### References\n\nDeshpande, A.S., Ulahannan, N., Pendleton, M. et al. Identifying synergistic high-order 3D chromatin conformations from genome-scale nanopore concatemer sequencing. Nat Biotechnol (2022). https://doi.org/10.1038/s41587-022-01289-z: https://www.nature.com/articles/s41587-022-01289-z  "
    }
}